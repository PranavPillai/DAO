pragma solidity ^0.4.0;

contract Token {
    
  /// @return total amount of tokens
  function totalSupply() constant returns (uint256 supply) {}
  /// @param _owner The address from which the balance will be retrieved
  /// @return The balance
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  /// @notice send `_value` token to `_to` from `msg.sender`
  /// @param _to The address of the recipient
  /// @param _value The amount of token to be transferred
  /// @return Whether the transfer was successful or not
  function transfer(address _to, uint256 _value) returns (bool success) {}
  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
  /// @param _from The address of the sender
  /// @param _to The address of the recipient
  /// @param _value The amount of token to be transferred
  /// @return Whether the transfer was successful or not
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
  /// @param _spender The address of the account able to transfer the tokens
  /// @param _value The amount of wei to be approved for transfer
  /// @return Whether the approval was successful or not
  function approve(address _spender, uint256 _value) returns (bool success) {}
  /// @param _owner The address of the account owning tokens
  /// @param _spender The address of the account able to transfer the tokens
  /// @return Amount of remaining tokens allowed to spent
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
  uint public decimals;
  string public name;
}

contract DAO {
    
    uint totalDaoTokens;
    uint tokenCost;
    uint tokenSellLength;
    uint currentTime;
    uint totalEth;
    Token DAOToken;
    mapping (address => uint) numDAOTokens;
    
    modifier onlyBy(address _account) {
        if (msg.sender != _account) 
            throw;
        _;
    }
    
    modifier onlyBefore() {
        if (now > currentTime + tokenSellLength)
            throw;
        _;
    }
    
    function DAO(uint _tokenCost, uint _tokenSellLength, address _token) {
        
        tokenCost = _tokenCost;
        tokenSellLength = _tokenSellLength;
        DAOToken = new Token();
        currentTime = now;
    }
    
    function invest() onlyBefore returns (bool) {
        if (msg.value < 0) throw;
        numTokens = msg.value/tokenCost;
        if(!DAOToken.approve(msg.sender, numTokens) throw;
        return true;
    }
    
    
    
}
